typedef char ID[4];

typedef struct {
    uint32 length;
    char str[length] <bgcolor=cLtRed>;
} UEString <optimize=false>;

typedef struct {
    byte flag;
    if (flag) {
        GUID guid;
    }
} OptionalGUID <optimize=false>;

typedef struct {
    float x;
    float y;
} Vec2;

typedef struct {
    float x;
    float y;
    float z;
} Vec3;

typedef struct {
    float r;
    float g;
    float b;
    float a;
} Color;

typedef struct {
    Vec3 a;
    Vec3 b;
    byte null;
} Box;

typedef struct {
    byte magic; // TODO: No idea how this works, probably broken
    switch (magic) {
        case 2:
            char buff[8];
            break;
        case 0:
        case 8:
            char buff[9];
            UEString key;
            break;
        default:
            Assert(false, Str("Unrecognized magic number: %u", magic));
            break;
    }
    UEString value;
} Text <optimize=false>;

typedef struct {
    UEString path;
    UEString name;
} MulticastInlineDelegateEntry <optimize=false>;

typedef struct {
    uint32 count;
    MulticastInlineDelegateEntry entries[count];
} MulticastInlineDelegate <optimize=false>;

typedef struct {
    GUID id;
    int32 value;
} CustomFormatData <bgcolor=cLtBlue>;

typedef struct {
    ID magic;
    int32 saveGameVersion;
    int32 packageVersion;
    int16 engineVersionMajor;
    int16 engineVersionMinor;
    int16 engineVersionPatch;
    int32 engineVersionBuild;
    UEString engineVersionMinor;

    int customFormatVersion;
    unsigned int customFormatDataCount;
    CustomFormatData customFormatData[customFormatDataCount];
} Header;

struct UEProperty;

typedef struct {
    do {
        UEProperty value;
    } while (value.name.str != "None");
} Struct <optimize=false>;

typedef struct(char type[], uint32 count) {
    switch (type) {
        case "Guid":
            char value[16 * count]; // TODO: Array of GUIDs
            break;
        case "DateTime":
            uint64 value[count]; // TODO: Determine time format
            break;
        case "Box":
            Box box[count];
            break;
        case "Vector2D":
            Vec2 value[count];
            break;
        case "Vector":
            Vec3 value[count];
            break;
        case "Rotator":
            Vec3 value[count];
            break;
        case "LinearColor":
            Color value[count];
            break;
        case "IntProperty":
            int32 value[count];
            break;
        case "UInt32Property":
            uint32 value[count];
            break;
        case "FloatProperty":
            float value[count];
            break;
        case "ByteProperty":
            UEString value[count]; // Enum name
            break;
        case "BoolProperty":
            byte value[count];
            break;
        case "ObjectProperty":
        case "StrProperty":
            UEString value[count];
            break;
        case "TextProperty":
            Text value[count];
            break;
        case "MulticastInlineDelegateProperty":
            MulticastInlineDelegate value[count];
            break;
        default:
            Struct value[count];
            break;
    }
} PropertyValue <optimize=false>;

typedef struct(char type[]) {
    switch (type) {
        case "StructProperty":
            GUID value;
            break;
        default:
            PropertyValue value(type, 1);
            break;
    }
} KeyValue <optimize=false>;

typedef struct(UEString &keyType, UEString &valueType) {
    KeyValue key(keyType.str);
    PropertyValue value(valueType.str, 1);
} MapEntry <optimize=false>;

typedef struct {
    UEString name;
    if (name.str != "None") {
        UEString type;
        uint64 length;
        // char data[length + 1];
        //Printf("Reading %s\n", type.str);
        switch (type.str) {
            case "IntProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "UInt32Property":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "FloatProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "BoolProperty":
                PropertyValue value(type.str, 1);
                OptionalGUID id;
                break;
            case "ByteProperty":
                UEString enumType; // TODO: don't fully understand enums yet
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "StructProperty":
                UEString type;
                GUID id;
                OptionalGUID optionalID;
                PropertyValue value(type.str, 1);
                break;
            case "ArrayProperty":
                UEString type;
                OptionalGUID id;
                uint32 count;
                switch (type.str) {
                    case "StructProperty":
                        UEString type;
                        UEString name;
                        uint64 size;
                        UEString structType;
                        GUID id2;
                        byte null2;
                        if (count > 0) PropertyValue value(structType.str, count) <optimize=false>;
                        break;
                    default:
                        if (count > 0) PropertyValue value(type.str, count);
                        break;
                }
                break;
            case "ObjectProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "StrProperty":
            case "NameProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "TextProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "MulticastInlineDelegateProperty":
                OptionalGUID id;
                PropertyValue value(type.str, 1);
                break;
            case "SetProperty":
                UEString type;
                OptionalGUID id;
                uint32 idk;
                uint32 count;
                switch (type.str) {
                    case "StructProperty":
                        char value[16 * count]; // TODO: Array of GUIDs
                        break;
                    default:
                        PropertyValue value(type.str, count);
                        break;
                }
                break;
            case "MapProperty":
                UEString keyType;
                UEString valueType;
                OptionalGUID id;
                uint32 idk;
                uint32 count;
                if (count > 0) MapEntry value(keyType, valueType)[count] <optimize=false>;
                break;
        }
    }
} UEProperty <bgcolor=cDkYellow, optimize=false>;

typedef struct {
    UEString saveGameType;
    do {
        UEProperty value;
    } while (value.name.str != "None");
    uint32 end <bgcolor=cWhite>;
    Assert(end == 0, "Trailing bytes were not zero");
    Assert(FEof(), "End of file not reached");
} Save;

LittleEndian();
Header header;
Save save;